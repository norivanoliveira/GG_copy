local a=1.98 local b='GGAIO'if _G.GGAIO then return end if not FileExist(COMMON_PATH.."GGCore.lua")then if not _G.DownloadingGGCore then DownloadFileAsync("https://raw.githubusercontent.com/gamsteron/GG/master/GGCore.lua",COMMON_PATH.."GGCore.lua",function()end)print('GGCore - downloaded! Please 2xf6!')_G.DownloadingGGCore=true end return end require('GGCore')GGUpdate:New({version=a,scriptName=b,scriptPath=SCRIPT_PATH..b..".lua",scriptUrl="https://raw.githubusercontent.com/gamsteron/GG/master/"..b..".lua",versionPath=COMMON_PATH.."GGVersion.lua",versionType=0,})local c={['Ahri']=true,['Ashe']=true,['Blitzcrank']=true,['Brand']=true,['Ezreal']=true,['Jhin']=true,['Karthus']=true,['Kayle']=true,['Kindred']=true,['KogMaw']=true,['MissFortune']=true,['Morgana']=true,['Nasus']=true,['Nidalee']=true,['Quinn']=true,['Ryze']=true,['Sivir']=true,['Sona']=true,['Taric']=true,['Tristana']=true,['Twitch']=true,['Varus']=true,['Vayne']=true,['Xayah']=true,}local d={['Ahri']=true,['Ashe']=true,['Brand']=true,['Karthus']=true,['Kayle']=true,['Kindred']=true,['MissFortune']=true,['Nasus']=true,['Nidalee']=true,['Quinn']=true,['Ryze']=true,['Sivir']=true,['Sona']=true,['Tristana']=true,['Xayah']=true,}local e={['KogMaw']=true,}if c[myHero.charName]==nil then print(b..' - '..myHero.charName.." not supported!")return end local f,g,h local i,j,k,l,m,n,o,p,q local r=2 local s=3 local t=4 local u=0 local v=1 local w=2 local x=-1 local y=0 local z=1 local A=2 local B=3 local C=4 local D=5 local E=300 local F=myHero.team local G=300-myHero.team local H=math.huge local I=math.pi local J=assert(math.sqrt)local K=assert(math.abs)local L=assert(math.ceil)local M=assert(math.min)local N=assert(math.max)local O=assert(math.pow)local P=assert(math.atan)local Q=assert(math.acos)local R=assert(math.random)local S=assert(table.sort)local T=assert(table.remove)local U=assert(table.insert)local V=myHero local W=os local X=math local Y=Game local Z=Vector local ab=Control local bb=Draw local cb=table local db=pairs local eb=GetTickCount local fb=true local gb={["CaitlynAceintheHole"]=true,["Crowstorm"]=true,["DrainChannel"]=true,["GalioIdolOfDurand"]=true,["ReapTheWhirlwind"]=true,["KarthusFallenOne"]=true,["KatarinaR"]=true,["LucianR"]=true,["AlZaharNetherGrasp"]=true,["Meditate"]=true,["MissFortuneBulletTime"]=true,["AbsoluteZero"]=true,["PantheonRJump"]=true,["PantheonRFall"]=true,["ShenStandUnited"]=true,["Destiny"]=true,["UrgotSwap2"]=true,["VelkozR"]=true,["InfiniteDuress"]=true,["XerathLocusOfPower2"]=true}local hb=function(pb,qb,rb)pb=pb.pos or pb qb=qb.pos or qb local sb=pb.x-qb.x local tb=(pb.z or pb.y)-(qb.z or qb.y)if sb*sb+tb*tb<=rb*rb then return true end return false end local ib=function(pb,qb)pb=pb.pos or pb qb=qb.pos or qb local rb=pb.x-qb.x local sb=(pb.z or pb.y)-(qb.z or qb.y)return X.sqrt(rb*rb+sb*sb)end local jb=function(pb,qb,rb,sb)if not fb and(qb or rb)then return false end if rb==nil then if qb==nil then ab.KeyDown(pb)ab.KeyUp(pb)return true end ab.CastSpell(pb,qb)fb=false return true end if qb==nil then return false end rb:GetPrediction(qb,V)if rb:CanHit(sb or s)then ab.CastSpell(pb,rb.CastPosition)fb=false return true end return false end local kb=function(pb,qb,rb)local sb=pb.pos:To2D()local tb=sb.x-50 local ub=sb.y bb.Text(qb,50,tb+50,ub-15,rb)end local lb=function(pb,qb,rb)local sb=qb+(qb-pb):Normalized()*50 local tb=sb+(qb-pb):Normalized()*(rb-50)local ub={x=sb.x,z=sb.z}local vb={x=tb.x,z=tb.z}if MapPosition:intersectsWall(ub,vb)or(MapPosition:inWall(ub)and MapPosition:inWall(vb))then return true end return false end local mb=function(pb,qb)local rb={}if not fb then return rb end for sb,tb in ipairs(h.EnemyHeroes)do local ub=qb and tb.boundingRadius or 0 if tb.distance<pb+ub then U(rb,tb)end end return rb end local nb=function(pb,qb)local rb=false local sb=#pb qb=qb.pos or qb local tb=qb.x local ub=qb.z or qb.y for vb=1,#pb do if(pb[vb].z<ub and pb[sb].z>=ub or pb[sb].z<ub and pb[vb].z>=ub)then if(pb[vb].x+(ub-pb[vb].z)/(pb[sb].z-pb[vb].z)*(pb[sb].x-pb[vb].x)<tb)then rb=not rb end end sb=vb end return rb end local ob=function(pb,qb,rb)local sb={}if not fb then return sb end for tb,ub in ipairs(h.EnemyHeroes)do local vb=rb and ub.boundingRadius or 0 if ub.distance<pb+vb and nb(qb,ub)then U(sb,ub)end end return sb end if e[V.charName]then f=ScriptMenu("GGAIO"..V.charName,'GG AIO - '..V.charName)g=f.Settings f:Menu('Combo','Combo')f:Menu('Harass','Harass')f.Harass:KeyToggle('HarassOnToggle','Harass Toggle',false,'H')f.Harass.HarassOnToggle:PermaShow('Harass Toggle Key')else if d[V.charName]then f=ScriptMenu("GGAIO_Aram_"..V.charName,'GG AIO Aram - '..V.charName)g=f.settings else f={}f.m=MenuElement({name="GG "..V.charName,id='GG'..V.charName,type=_G.MENU})f.q=f.m:MenuElement({name='Q',id='q',type=_G.MENU})f.w=f.m:MenuElement({name='W',id='w',type=_G.MENU})f.e=f.m:MenuElement({name='E',id='e',type=_G.MENU})f.r=f.m:MenuElement({name='R',id='r',type=_G.MENU})f.d=f.m:MenuElement({name='Drawings',id='d',type=_G.MENU})f.m:MenuElement({name='',type=_G.SPACE,id='VersionSpaceA'})f.m:MenuElement({name='Version  '..a,type=_G.SPACE,id='VersionSpaceB'})end end if h==nil and V.charName=='Ahri'then f:Info('infoAram','Aram - WEQ Spam')local pb=GGPrediction:SpellPrediction({Delay=0.25,Radius=100,Range=900,Speed=1550,Collision=false,Type=GGPrediction.SPELLTYPE_LINE})local qb=GGPrediction:SpellPrediction({Delay=0.25,Radius=60,Range=1000,Speed=1500,Collision=true,Type=GGPrediction.SPELLTYPE_LINE})local rb=nil local sb=0 h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,}local function tb(ub,vb)if ub and ub.valid and ub.visible and ub.alive and ub.isTargetable and(vb==nil or ub.distance<vb)then return true end return false end function h:OnTick()if Y.IsChatOpen()or V.dead then return end if m:IsReady(_W,{q=0,w=0.5,e=0,r=0})then local ub=i:GetTarget(700,v)if ub~=nil then jb(HK_W)return end end if j:CanMove()then if m:IsReady(_E,{q=0.5,w=0,e=0.5,r=0})then local ub=i:GetTarget(qb.Range,v)if ub~=nil then if jb(HK_E,ub,qb,2+1)then sb=W.clock()rb=ub return end end end if m:IsReady(_Q,{q=0.5,w=0,e=0.3,r=0})then local ub=i:GetTarget(pb.Range,v)if W.clock()<sb+2 and tb(rb,900)then ub=rb end if ub~=nil and tb(ub,900)then jb(HK_Q,ub,pb,2+1)return end end end end end if h==nil and V.charName=='Ashe'then f:Info('infoAram','Aram - QW Spam')h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,OnPostAttack=function()if m:IsReady(_Q,{q=0.5,w=0,e=0,r=0})then jb(HK_Q)end end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if j:CanMove()then if self.AttackTarget then if m:IsReady(_Q,{q=0.5,w=0,e=0,r=0})then jb(HK_Q)return end end if m:IsReady(_W,{q=0,w=0.5,e=0,r=0})then local pb=i:GetTarget(1000,u)if pb~=nil then jb(HK_W,pb)end end end end end if h==nil and V.charName=='Blitzcrank'then f.q_combo=f.q:MenuElement({id='combo',name='Combo',value=true})f.q_harass=f.q:MenuElement({id='harass',name='Harass',value=true})f.q_hitchance=f.q:MenuElement({id="hitchance",name="Hitchance",value=2,drop={"Normal","High","Immobile"}})f.q_useon_combo=f.q:MenuElement({id="useon_combo",name="Combo Use on",type=_G.MENU})f.q_useon_harass=f.q:MenuElement({id="useon_harass",name="Harass Use on",type=_G.MENU})f.q:MenuElement({id="auto",name="Auto",type=_G.MENU})f.q_auto_enabled=f.q.auto:MenuElement({id="enabled",name="Enabled",value=false})f.q_auto_hitchance=f.q.auto:MenuElement({id="hitchance",name="Hitchance",value=2,drop={"Normal","High","Immobile"}})f.q_auto_useon=f.q.auto:MenuElement({id="useon",name="Use on",type=_G.MENU})f.q:MenuElement({id="ks",name="Killsteal",type=_G.MENU})f.q_ks_enabled=f.q.ks:MenuElement({id="enabled",name="Enabled",value=false})f.q_ks_hitchance=f.q.ks:MenuElement({id="hitchance",name="Hitchance",value=2,drop={"Normal","High","Immobile"}})f.q:MenuElement({id="interrupter",name="Interrupter",type=_G.MENU})f.q_interrupter_enabled=f.q.interrupter:MenuElement({id="enabled",name="Enabled",value=false})f.r_xenemies=f.r:MenuElement({id="xenemies",name="X Enemies",value=2,min=1,max=5,step=1})f.r_xrange=f.r:MenuElement({id="xrange",name="X Distance",value=550,min=300,max=600,step=50})f.r:MenuElement({id="auto",name="Auto",type=_G.MENU})f.r_auto_enabled=f.r.auto:MenuElement({id="enabled",name="Enabled",value=false})f.r_auto_xenemies=f.r.auto:MenuElement({id="xenemies",name="X Enemies",value=3,min=1,max=5,step=1})f.r_auto_xrange=f.r.auto:MenuElement({id="xrange",name="X Distance",value=550,min=300,max=600,step=50})f.r:MenuElement({id="ks",name="Killsteal",type=_G.MENU})f.r_ks_enabled=f.r.ks:MenuElement({id="enabled",name="Enabled",value=false})f.d_Draw_Q=f.d:MenuElement({id="Draw_Q",name="Draw Q",value=true})f.d_Draw_R=f.d:MenuElement({id="Draw_R",name="Draw R",value=true})local pb=GGPrediction:SpellPrediction({Type=GGPrediction.SPELLTYPE_LINE,Delay=0.25,Radius=140/2,Range=1090,Speed=1800,Collision=true,MaxCollision=0,CollisionTypes={GGPrediction.COLLISION_MINION,GGPrediction.COLLISION_YASUOWALL}})local qb={Range=590}h={CanAttackCb=function()return not V.isChanneling and m:CanTakeAction({q=0.33,w=0,e=0,r=0.33})end,CanMoveCb=function()return m:CanTakeAction({q=0.2,w=0,e=0,r=0.2})end,}function h:OnLoad()n:OnEnemyHeroLoad(function(rb)f.q_auto_useon:MenuElement({id=rb.charName,name=rb.charName,value=true})f.q_useon_combo:MenuElement({id=rb.charName,name=rb.charName,value=true})f.q_useon_harass:MenuElement({id=rb.charName,name=rb.charName,value=true})end)end function h:OnTick()self:ELogic()self:QLogic()self:RLogic()end function h:QLogic()if not m:IsReady(_Q,{q=0.33,w=0,e=0,r=0.33})then return end self.QTargets=mb(pb.Range)self:QKS()self:QInterrupter()self:QAuto()self:QCombo()self:QHarass()end function h:ELogic()if not m:IsReady(_E,{q=0.33,w=0,e=1,r=0.33})then return end if self.AttackTarget or Y.Timer()<m.QkTimer+0.77 then jb(HK_E)end end function h:RLogic()if not m:IsReady(_R,{q=0.33,w=0,e=0,r=0.33})then return end self.RTargets=mb(qb.Range)self:RKS()self:RAuto()end function h:QKS()if not f.q_ks_enabled:Value()then return end local rb=20 local sb=50*V:GetSpellData(_Q).level local tb=V.ap local ub=rb+sb+tb if ub<100 then return end for vb,wb in ipairs(self.QTargets)do local xb=wb.health if xb>100 and xb<l:CalculateDamage(V,wb,v,ub)then jb(HK_Q,wb,pb,f.q_ks_hitchance:Value()+1)end end end function h:QInterrupter()if not f.q_interrupter_enabled:Value()then return end for rb,sb in ipairs(self.QTargets)do local tb=sb.activeSpell if tb and tb.valid and gb[tb.name]and tb.castEndTime-self.Timer>0.33 then jb(HK_Q,sb,pb,r)end end end function h:QAuto()if not f.q_auto_enabled:Value()then return end local rb={}for sb,tb in ipairs(self.QTargets)do local ub=f.q_auto_useon[tb.charName]if ub and ub:Value()then U(rb,tb)end end jb(HK_Q,i:GetTarget(rb,v),pb,f.q_auto_hitchance:Value()+1)end function h:QCombo()if not(self.IsCombo and f.q_combo:Value())then return end local rb={}for sb,tb in ipairs(self.QTargets)do local ub=f.q_useon_combo[tb.charName]if ub and ub:Value()then U(rb,tb)end end jb(HK_Q,i:GetTarget(rb,v),pb,f.q_hitchance:Value()+1)end function h:QHarass()if not(self.IsHarass and f.q_harass:Value())then return end local rb={}for sb,tb in ipairs(self.QTargets)do local ub=f.q_useon_harass[tb.charName]if ub and ub:Value()then U(rb,tb)end end jb(HK_Q,i:GetTarget(rb,v),pb,f.q_hitchance:Value()+1)end function h:RKS()if not f.r_ks_enabled:Value()then return end local rb=125 local sb=125*V:GetSpellData(_R).level local tb=V.ap local ub=rb+sb+tb if ub<100 then return end for vb,wb in ipairs(self.RTargets)do local xb=wb.health if xb>100 and xb<l:CalculateDamage(V,wb,v,ub)then jb(HK_R)end end end function h:RAuto()if not f.r_auto_enabled:Value()then return end local rb=0 for sb,tb in ipairs(self.RTargets)do if tb.distance<f.r_auto_xrange:Value()then rb=rb+1 end end if rb>=f.r_auto_xenemies:Value()then jb(HK_R)end end function h:OnDraw()if f.d_Draw_Q:Value()and m:IsReady(_Q)then bb.Circle(V.pos,1090,bb.Color(0,128,128))end if f.d_Draw_R:Value()and m:IsReady(_R)then bb.Circle(V.pos,590,bb.Color(0,128,123))end end end if h==nil and V.charName=='Brand'then f:Info('infoAram','Aram - EWQ Spam')local pb=GGPrediction:SpellPrediction({Type=GGPrediction.SPELLTYPE_LINE,Delay=0.25,Radius=60,Range=1050,Speed=1600,Collision=true,MaxCollision=0,CollisionTypes={GGPrediction.COLLISION_MINION,GGPrediction.COLLISION_YASUOWALL}})local qb=GGPrediction:SpellPrediction({Type=GGPrediction.SPELLTYPE_CIRCLE,Delay=0.85,Radius=250,Range=900,Speed=X.huge,Collision=false,MaxCollision=0,CollisionTypes={GGPrediction.COLLISION_MINION,GGPrediction.COLLISION_YASUOWALL}})h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if m:IsReady(_E,{q=0,w=0,e=0.5,r=0})then local rb=i:GetTarget(650,v)if rb~=nil then jb(HK_E,rb)end end if m:IsReady(_W,{q=0,w=0.5,e=0,r=0})then local rb=i:GetTarget(qb.Range-15,v)if rb~=nil then jb(HK_W,rb,qb,2+1)end end if m:IsReady(_Q,{q=0.5,w=0,e=0,r=0})then local rb=i:GetTarget(pb.Range,v)if rb~=nil then jb(HK_Q,rb,pb,2+1)end end end end if h==nil and V.charName=='Ezreal'then f.q_combo=f.q:MenuElement({id='combo',name='Combo',value=true})f.q_harass=f.q:MenuElement({id='harass',name='Harass',value=true})f.q_hitchance=f.q:MenuElement({id="hitchance",name="Hitchance",value=2,drop={"normal","high","immobile"}})f.q:MenuElement({id="auto",name="Auto",type=_G.MENU})f.q_auto_enabled=f.q.auto:MenuElement({id="enabled",name="Enabled",value=true,key=string.byte("T"),toggle=true})f.q_auto_hitchance=f.q.auto:MenuElement({id="hitchance",name="Hitchance",value=2,drop={"normal","high","immobile"}})f.q_auto_mana=f.q.auto:MenuElement({id="mana",name="Minimum Mana Percent",value=50,min=0,max=100,step=1})f.q:MenuElement({id="lane",name="LaneClear",type=_G.MENU})f.q_lh_enabled=f.q.lane:MenuElement({id="lhenabled",name="LastHit Enabled",value=true})f.q_lh_mana=f.q.lane:MenuElement({id="lhmana",name="LastHit Min. Mana %",value=50,min=0,max=100,step=5})f.q_lc_enabled=f.q.lane:MenuElement({id="lcenabled",name="LaneClear Enabled",value=false})f.q_lc_mana=f.q.lane:MenuElement({id="lcmana",name="LaneClear Min. Mana %",value=75,min=0,max=100,step=5})f.w_combo=f.w:MenuElement({id='combo',name='Combo',value=true})f.w_harass=f.w:MenuElement({id='harass',name='Harass',value=true})f.w_hitchance=f.w:MenuElement({id="hitchance",name="Hitchance",value=1,drop={"normal","high","immobile"}})f.w_mana=f.w:MenuElement({id="mana",name="Min. Mana %",value=5,min=0,max=100,step=1})f.e_fake=f.e:MenuElement({id="efake",name="Key to use",value=false,key=string.byte("E")})f.e_lol=f.e:MenuElement({id="elol",name="key in game",value=false,key=string.byte("L")})f.r_combo=f.r:MenuElement({id='combo',name='Combo',value=true})f.r_harass=f.r:MenuElement({id='harass',name='Harass',value=false})f.r_auto=f.r:MenuElement({id='auto',name='Auto',value=false})f.r_stopaa=f.r:MenuElement({id="stopaa",name="Don't when enemy in attack range",value=true})f.r_stopxrange=f.r:MenuElement({id="stopxrange",name="Don't when enemies in x range",value=600,min=0,max=1000,step=100})f.r_xenemies=f.r:MenuElement({id="xenemies",name="When can hit x enemies",value=2,min=1,max=5,step=1})f.r_xtime=f.r:MenuElement({id="xtime",name="When time to hit < x",value=3.0,min=1.0,max=10.0,step=0.5})f.r_hitchance=f.r:MenuElement({id="hitchance",name="Hitchance",value=2,drop={"normal","high","immobile"}})f.r:MenuElement({name="Extras",id="extras",type=_G.MENU})f.r_extras_ks=f.r.extras:MenuElement({id='ks',name='KS',value=false})f.r_extras_immobile=f.r.extras:MenuElement({id='immobile',name='Immobile',value=false})f.r:MenuElement({name="Semi Manual",id="semi",type=_G.MENU})f.r_semi_key=f.r.semi:MenuElement({name="Semi-Manual Key",id="key",key=string.byte("T")})f.r_semi_xenemies=f.r.semi:MenuElement({id="xenemies",name="When can hit x enemies",value=1,min=1,max=5,step=1})f.r_semi_xtime=f.r.semi:MenuElement({id="xtime",name="When time to hit < x",value=6.0,min=1.0,max=10.0,step=0.5})f.r_semi_hitchance=f.r.semi:MenuElement({id="hitchance",name="Hitchance",value=1,drop={"normal","high","immobile"}})f.d:MenuElement({name="Auto Q",id="autoq",type=_G.MENU})f.d_autoq_enabled=f.d.autoq:MenuElement({id="enabled",name="Enabled",value=true})f.d_autoq_size=f.d.autoq:MenuElement({id="size",name="Text Size",value=25,min=1,max=64,step=1})f.d_autoq_custom=f.d.autoq:MenuElement({id="custom",name="Custom Position",value=false})f.d_autoq_width=f.d.autoq:MenuElement({id="posX",name="Text Position Width",value=Y.Resolution().x*0.5-150,min=1,max=Y.Resolution().x,step=1})f.d_autoq_height=f.d.autoq:MenuElement({id="posY",name="Text Position Height",value=Y.Resolution().y*0.5,min=1,max=Y.Resolution().y,step=1})local pb=0 local qb=GGPrediction:SpellPrediction({Delay=0.25,Radius=60,Range=1150,Speed=2000,Collision=true,Type=GGPrediction.SPELLTYPE_LINE})local rb=GGPrediction:SpellPrediction({Delay=0.25,Radius=60,Range=1150,Speed=1200,Collision=false,Type=GGPrediction.SPELLTYPE_LINE})local sb=GGPrediction:SpellPrediction({Delay=1,Radius=160,Range=20000,Speed=2000,Collision=false,Type=GGPrediction.SPELLTYPE_LINE})h={CanAttackCb=function()return m:CanTakeAction({q=0.33,w=0.33,e=0.33,r=1.13})end,CanMoveCb=function()return m:CanTakeAction({q=0.23,w=0.23,e=0.23,r=1})end,OnPostAttackTick=function(tb)h:PreTick()h.QWTargets=mb(qb.Range)h:WLogic()h:QLogic()h:RLogic()end,}function h:OnLoad()local tb=function()return((25*V:GetSpellData(_Q).level)-10)+(1.1*V.totalDamage)+(0.4*V.ap)end local ub=function()return f.q_lh_enabled:Value()and self.ManaPercent>=f.q_lh_mana:Value()end local vb=function()return f.q_lc_enabled:Value()and self.ManaPercent>=f.q_lc_mana:Value()end local wb=function()return m:IsReady(_Q,{q=0.33,w=0.33,e=0.2,r=0.77})end m:SpellClear(_Q,qb,wb,ub,vb,tb)end function h:OnWndMsg(tb,ub)if ub==f.e_fake:Key()then pb=W.clock()end end function h:OnTick()self:ELogic()if self.IsAttacking or self.CanAttackTarget or self.AttackTarget then return end self.QWTargets=mb(qb.Range)self:WLogic()self:QLogic()self:RLogic()end function h:QLogic()if not m:IsReady(_Q,{q=1,w=0.33,e=0.33,r=1.13})then return end self:QAuto()self:QCombo()end function h:WLogic()if not m:IsReady(_W,{q=0.33,w=1,e=0.33,r=1.13})then return end self:WCombo()end function h:ELogic()local tb=eb()if self.EHelper~=nil then if q.Step==0 then q:Add(self.EHelper,V.pos:Extended(Z(mousePos),600))self.EHelper=nil end return end if not(W.clock()<pb+0.5 and Y.CanUseSpell(_E)==0 and not ab.IsKeyDown(HK_LUS)and not V.dead and not Y.IsChatOpen()and Y.IsOnTop())then return end if self.LastE and tb<self.LastE+1000 then return end if tb<LastChatOpenTimer+1000 then return end if tb<LevelUpKeyTimer+1000 then return end self.LastE=tb if q.Step==0 then q:Add(f.e_lol:Key(),V.pos:Extended(Z(mousePos),600))return end self.EHelper=f.e_lol:Key()end function h:RLogic()if not m:IsReady(_R,{q=0.33,w=0.33,e=0.33,r=1})then return end if f.r_stopaa:Value()and self.AttackTarget then return end local tb=mb(f.r_stopxrange:Value())if#tb>0 then return end self.RCasted=false self.IsRAuto=f.r_auto:Value()self.IsRKS=f.r_extras_ks:Value()self.IsRImmobile=f.r_extras_immobile:Value()self.IsRSemiKey=f.r_semi_key:Value()self.IsRCombo=self.IsCombo and f.r_combo:Value()self.IsRHarass=self.IsHarass and f.r_harass:Value()self.RHitChance=f.r_hitchance:Value()+1 self.RAOE={}if self.IsRAuto or self.IsRCombo or self.IsRHarass or self.IsRSemiKey or self.IsRKS or self.IsRImmobile then self.RAOE=sb:GetAOEPrediction(V)end if#self.RAOE==0 then return end self:RCombo()self:RSemiManual()self:RImmobile()self:RKS()end function h:RCombo()if not(f.r_auto:Value()or(self.IsCombo and f.r_combo:Value())or(self.IsHarass and f.r_harass:Value()))then return end local tb=f.r_hitchance:Value()+1 local ub=f.r_xenemies:Value()local vb=f.r_xtime:Value()local wb=nil local xb=0 local yb=1000 for zb=1,#self.RAOE do local Ab=self.RAOE[zb]if Ab.HitChance>=tb and Ab.TimeToHit<=vb and Ab.Count>=ub then if Ab.Count>xb or(Ab.Count==xb and Ab.Distance<yb)then yb=Ab.Distance xb=Ab.Count wb=Ab end end end if wb then ab.CastSpell(HK_R,wb.CastPosition)self.RCasted=true end end function h:RSemiManual()if self.RCasted or not f.r_semi_key:Value()then return end local tb=f.r_semi_hitchance:Value()+1 local ub=f.r_semi_xenemies:Value()local vb=f.r_semi_xtime:Value()local wb=nil local xb=0 local yb=1000 for zb=1,#self.RAOE do local Ab=self.RAOE[zb]if Ab.HitChance>=tb and Ab.TimeToHit<=vb and Ab.Count>=ub then if Ab.Count>xb or(Ab.Count==xb and Ab.Distance<yb)then yb=Ab.Distance xb=Ab.Count wb=Ab end end end if wb then ab.CastSpell(HK_R,wb.CastPosition)self.RCasted=true end end function h:RImmobile()if self.RCasted or not f.r_extras_immobile:Value()then return end local tb=t local ub=1 local vb=nil local wb=0 local xb=1000 for yb=1,#self.RAOE do local zb=self.RAOE[yb]if zb.HitChance>=tb and zb.Count>=ub then if zb.Count>wb or(zb.Count==wb and zb.Distance<xb)then xb=zb.Distance wb=zb.Count vb=zb end end end if vb then ab.CastSpell(HK_R,vb.CastPosition)self.RCasted=true end end function h:RKS()if self.RCasted or not f.r_extras_ks:Value()then return end local tb=V:GetSpellData(_R)local ub=200+V.bonusDamage+(0.9*V.ap)+(150*tb.level)local vb=s local wb=1 local xb=nil local yb=0 local zb=1000 for Ab=1,#self.RAOE do local Bb=self.RAOE[Ab]if Bb.HitChance>=vb and Bb.TimeToHit<=3.0 and Bb.Count>=wb then local Cb=Bb.Unit.health if l:CalculateDamage(V,Bb.Unit,v,ub)>Cb and not Bb.Unit.dead and Bb.Unit.alive then local Db=true local Eb=n:GetAllyHeroes(sb.Range)for Fb=1,#Eb do local Gb=Eb[Fb]if not Gb.isMe then if GGPrediction:GetDistance(Gb.pos,Bb.Unit.pos)<600 and Gb.health>600 then Db=false end end end if Db then if Bb.Count>yb or(Bb.Count==yb and Bb.Distance<zb)then zb=Bb.Distance yb=Bb.Count xb=Bb end end end end end if xb then ab.CastSpell(HK_R,xb.CastPosition)self.RCasted=true end end function h:QAuto()if not f.q_auto_enabled:Value()then return end if self.ManaPercent<f.q_auto_mana:Value()then return end for tb,ub in ipairs(self.QWTargets)do jb(HK_Q,ub,qb,f.q_auto_hitchance:Value()+1)end end function h:QCombo()if not((self.IsCombo and f.q_combo:Value())or(self.IsHarass and f.q_harass:Value()))then return end local tb=self.AttackTarget~=nil and self.AttackTarget or i:GetTarget(self.QWTargets,u)jb(HK_Q,tb,qb,f.q_hitchance:Value()+1)end function h:WCombo()if not((self.IsCombo and f.w_combo:Value())or(self.IsHarass and f.w_harass:Value()))then return end if self.ManaPercent<f.w_mana:Value()then return end local tb=self.AttackTarget~=nil and self.AttackTarget or i:GetTarget(self.QWTargets,u)jb(HK_W,tb,rb,f.w_hitchance:Value()+1)end function h:OnDraw()if f.d_autoq_enabled:Value()then local tb,ub if f.d_autoq_custom:Value()then tb=f.d_autoq_width:Value()ub=f.d_autoq_height:Value()else local vb=V.pos:To2D()tb=vb.x-50 ub=vb.y end if f.q_auto_enabled:Value()then bb.Text("Auto Q Enabled",f.d_autoq_size:Value(),tb,ub,bb.Color(255,000,255,000))else bb.Text("Auto Q Disabled",f.d_autoq_size:Value(),tb,ub,bb.Color(255,255,000,000))end end end end if h==nil and V.charName=='JarvanIV'then f:Info('infoAram','Aram - WEQ Spam')h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if self.AttackTarget then if Y.CanUseSpell(_W)==0 then jb(HK_W)end if Y.CanUseSpell(_E)==0 then jb(HK_E,self.AttackTarget)end if Y.CanUseSpell(_Q)==0 then jb(HK_Q,self.AttackTarget)return end end end end if h==nil and V.charName=='Jhin'then f.q_combo=f.q:MenuElement({id="combo",name="Combo",value=true})f.q_harass=f.q:MenuElement({id="harass",name="Harass",value=false})f.q:MenuElement({id="lane",name="LaneClear",type=_G.MENU})f.q_lh_enabled=f.q.lane:MenuElement({id="lhenabled",name="LastHit Enabled",value=true})f.q_lh_mana=f.q.lane:MenuElement({id="lhmana",name="LastHit Min. Mana %",value=50,min=0,max=100,step=5})f.q_lc_enabled=f.q.lane:MenuElement({id="lcenabled",name="LaneClear Enabled",value=false})f.q_lc_mana=f.q.lane:MenuElement({id="lcmana",name="LaneClear Min. Mana %",value=75,min=0,max=100,step=5})f.w_combo=f.w:MenuElement({id="combo",name="Combo",value=true})f.w_harass=f.w:MenuElement({id="harass",name="Harass",value=false})f.w_noaatarget=f.w:MenuElement({id="noaatarget",name="Only when no attack target",value=true})f.w_onlypassive=f.w:MenuElement({id="onlypassive",name="Only when target has jhin buff",value=true})f.w_hitchance=f.w:MenuElement({id="hitchance",name="Hitchance",value=1,drop={"normal","high","immobile"}})f.w:MenuElement({id="lane",name="LaneClear",type=_G.MENU})f.w_lh_enabled=f.w.lane:MenuElement({id="lhenabled",name="LastHit Enabled",value=false})f.w_lh_mana=f.w.lane:MenuElement({id="lhmana",name="LastHit Min. Mana %",value=50,min=0,max=100,step=5})f.w_lc_enabled=f.w.lane:MenuElement({id="lcenabled",name="LaneClear Enabled",value=false})f.w_lc_mana=f.w.lane:MenuElement({id="lcmana",name="LaneClear Min. Mana %",value=75,min=0,max=100,step=5})f.e_combo=f.e:MenuElement({id="combo",name="Combo",value=true})f.e_harass=f.e:MenuElement({id="harass",name="Harass",value=false})f.e_hitchance=f.e:MenuElement({id="hitchance",name="Hitchance",value=3,drop={"normal","high","immobile"}})f.e:MenuElement({id="lane",name="LaneClear",type=_G.MENU})f.e_lh_enabled=f.e.lane:MenuElement({id="lhenabled",name="LastHit Enabled",value=false})f.e_lh_mana=f.e.lane:MenuElement({id="lhmana",name="LastHit Min. Mana %",value=50,min=0,max=100,step=5})f.e_lc_enabled=f.e.lane:MenuElement({id="lcenabled",name="LaneClear Enabled",value=false})f.e_lc_mana=f.e.lane:MenuElement({id="lcmana",name="LaneClear Min. Mana %",value=75,min=0,max=100,step=5})f.r_auto=f.r:MenuElement({id="auto",name="Auto - when jhin has r buff",value=true})f.r_hitchance=f.r:MenuElement({id="hitchance",name="Hitchance",value=1,drop={"normal","high","immobile"}})local pb={Delay=0.25,Range=550,Speed=2500}local qb=GGPrediction:SpellPrediction({Delay=0.75,Range=3000,Radius=45,Speed=X.huge,Type=GGPrediction.SPELLTYPE_LINE})local rb=GGPrediction:SpellPrediction({Delay=0.25,Range=750,Radius=120,Speed=1600,Type=GGPrediction.SPELLTYPE_CIRCLE})local sb=GGPrediction:SpellPrediction({Delay=0.25,Range=3500,Radius=80,Speed=5000,Type=GGPrediction.SPELLTYPE_LINE})h={CanAttackCb=function()return m:CanTakeAction({q=0.33,w=0.77,e=0.33,r=0.77})and not k:HasBuff(V,"jhinpassivereload")and not h:HasRBuff()end,CanMoveCb=function()return m:CanTakeAction({q=0.2,w=0.5,e=0.2,r=0.5})and not h:HasRBuff()end,}function h:OnLoad()self:QLaneClear()self:WLaneClear()self:ELaneClear()end function h:QLaneClear()local tb=function()local xb=V:GetSpellData(_Q).level local yb=(37.5+(7.5*xb))/100 return 20+(25*xb)+(yb*V.totalDamage)+(0.6*V.ap)end local ub=function()return f.q_lh_enabled:Value()and self.ManaPercent>=f.q_lh_mana:Value()end local vb=function()return f.q_lc_enabled:Value()and self.ManaPercent>=f.q_lc_mana:Value()end local wb=function()return m:IsReady(_Q,{q=0.33,w=0.77,e=0.33,r=0.77})end m:SpellClear(_Q,pb,wb,ub,vb,tb)end function h:WLaneClear()local tb=function()local xb=V:GetSpellData(_W).level return 15+(35*xb)+(0.5*V.totalDamage)end local ub=function()return f.w_lh_enabled:Value()and self.ManaPercent>=f.w_lh_mana:Value()end local vb=function()return f.w_lc_enabled:Value()and self.ManaPercent>=f.w_lc_mana:Value()end local wb=function()return m:IsReady(_W,{q=0.33,w=0.77,e=0.33,r=0.77})and k:HasBuff(V,"jhinpassivereload")end m:SpellClear(_W,qb,wb,ub,vb,tb)end function h:ELaneClear()local tb=function()local xb=V:GetSpellData(_E).level return-40+(60*xb)+(1.2*V.totalDamage)+(1.0*V.ap)end local ub=function()return f.e_lh_enabled:Value()and self.ManaPercent>=f.e_lh_mana:Value()end local vb=function()return f.e_lc_enabled:Value()and self.ManaPercent>=f.e_lc_mana:Value()end local wb=function()return m:IsReady(_E,{q=0.33,w=0.77,e=0.33,r=0.77})and k:HasBuff(V,"jhinpassivereload")end m:SpellClear(_E,rb,wb,ub,vb,tb)end function h:OnDraw()local tb=V.activeSpell if self:HasRBuff(tb)then local ub=Z(tb.placementPos)local vb=Z(tb.startPos)local wb=vb+(ub-vb):Rotated(0,30.6*X.pi/180,0):Normalized()*3500 local xb=vb+(ub-vb):Rotated(0,-30.6*X.pi/180,0):Normalized()*3500 local yb=vb:To2D()local zb=wb:To2D()local Ab=xb:To2D()bb.Line(yb.x,yb.y,zb.x,zb.y,1,bb.Color(255,255,255,255))bb.Line(yb.x,yb.y,Ab.x,Ab.y,1,bb.Color(255,255,255,255))end end function h:OnTick()self:RLogic()if self:HasRBuff()or self.IsAttacking then return end self:WLogic()self:QLogic()self:ELogic()end function h:HasRBuff(tb)local ub=tb or V.activeSpell if ub and ub.valid and ub.name:lower()=="jhinr"then return true end return false end function h:RLogic()if q.Step>0 then return end if not m:IsReady(_R,{q=0,w=0,e=0,r=0.75})then return end local tb=V.activeSpell if not self:HasRBuff(tb)then return end self.IsRAuto=f.r_auto:Value()if not self.IsRAuto then return end local ub=Z(tb.placementPos)local vb=Z(tb.startPos)local wb=vb+(ub-vb):Rotated(0,30.6*X.pi/180,0):Normalized()*3500 local xb=vb+(ub-vb):Rotated(0,-30.6*X.pi/180,0):Normalized()*3500 local yb={wb+(wb-vb):Normalized()*3500,xb+(xb-vb):Normalized()*3500,vb}self.RTarget=i:GetTarget(ob(3500,yb),u)self:RAuto()end function h:RAuto()if q.Step>0 then return end if self.IsRAuto then jb(HK_R,self.RTarget,sb,f.r_hitchance:Value()+1)end end function h:QLogic()if q.Step>0 then return end if not m:IsReady(_Q,{q=1,w=0.75,e=0.35,r=0.5})then return end self.IsQCombo=(self.IsCombo and f.q_combo:Value())or(self.IsHarass and f.q_harass:Value())if not self.IsQCombo then return end self.QTarget=self.AttackTarget~=nil and self.AttackTarget or i:GetTarget(mb(550+self.BoundingRadius-35,true),u)if self.QTarget==nil then return end self:QCombo()end function h:QCombo()if q.Step>0 then return end if self.IsQCombo then jb(HK_Q,self.QTarget)end end function h:WLogic()if q.Step>0 then return end if f.w_noaatarget:Value()and self.AttackTarget then return end if not m:IsReady(_W,{q=0.35,w=1,e=0.35,r=0.5})then return end self.IsWCombo=(self.IsCombo and f.w_combo:Value())or(self.IsHarass and f.w_harass:Value())if not self.IsWCombo then return end self.WTarget=self.AttackTarget~=nil and self.AttackTarget or i:GetTarget(mb(3000),u)if self.WTarget==nil or(f.w_onlypassive:Value()and not k:HasBuff(self.WTarget,"jhinespotteddebuff"))then return end self:WCombo()end function h:WCombo()if q.Step>0 then return end if self.IsWCombo then jb(HK_W,self.WTarget,qb,f.w_hitchance:Value()+1)end end function h:ELogic()if q.Step>0 then return end if not k:HasBuff(V,"jhinpassivereload")then return end if not m:IsReady(_E,{q=0.35,w=0.75,e=1,r=0.5})then return end self.IsECombo=(self.IsCombo and f.e_combo:Value())or(self.IsHarass and f.e_harass:Value())if not self.IsECombo then return end self.ETarget=self.AttackTarget~=nil and self.AttackTarget or i:GetTarget(mb(750),u)if self.ETarget==nil then return end self:ECombo()end function h:ECombo()if q.Step>0 then return end if self.IsECombo then jb(HK_E,self.ETarget,rb,f.e_hitchance:Value()+1)end end end if h==nil and V.charName=='Jinx'then f:Info('infoAram','Aram - W Spam')local pb=GGPrediction:SpellPrediction({Type=GGPrediction.SPELLTYPE_LINE,Delay=0.6,Radius=60,Range=1450,Speed=3300,Collision=true,MaxCollision=0,CollisionTypes={GGPrediction.COLLISION_MINION,GGPrediction.COLLISION_YASUOWALL}})h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if j:CanMove()then if m:IsReady(_W,{q=0,w=0.5,e=0,r=0})then local qb=i:GetTarget(pb.Range-100,u)if qb~=nil then end end end end end if h==nil and V.charName=='Karthus'then f:Info('infoAram','Aram - Q Spam')local pb=GGPrediction:SpellPrediction({Delay=0.25+0.759,Radius=80,Range=875,Speed=X.huge,Collision=false,Type=GGPrediction.SPELLTYPE_CIRCLE})h={CanAttackCb=function()return j.Modes[y]end,CanMoveCb=function()return true end,}function h:OnTick()if Y.IsChatOpen()then return end if V:GetSpellData(_Q).currentCd==0 and m:IsReady(_Q,{q=0.2,w=0,e=0,r=0})then local qb=i:GetTarget(pb.Range,v)if qb~=nil then jb(HK_Q,qb,pb,2+1)return end end end end if h==nil and V.charName=='Kayle'then f:Info('infoAram','Aram - EQW Spam')h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,OnPostAttack=function()if Y.CanUseSpell(_E)==0 then jb(HK_E)end end,}function h:OnTick()if j:CanMove()then if h.AttackTarget then if Y.CanUseSpell(_E)==0 then jb(HK_E)end if Y.CanUseSpell(_Q)==0 then jb(HK_Q,h.AttackTarget)return end end if 100*V.health/V.maxHealth<95 and Y.CanUseSpell(_W)==0 then jb(HK_W,V)end end end end if h==nil and V.charName=='Kindred'then f:Info('infoAram','Aram - EQ Spam')local pb=GGPrediction:SpellPrediction({Type=GGPrediction.SPELLTYPE_LINE,Delay=0.25,Radius=60,Range=1100,Speed=2075,Collision=false,MaxCollision=0,CollisionTypes={GGPrediction.COLLISION_MINION,GGPrediction.COLLISION_YASUOWALL}})h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if j:CanMove()then if self.AttackTarget then if m:IsReady(_E,{q=0,w=0,e=0.5,r=0})then jb(HK_E,self.AttackTarget)end if m:IsReady(_Q,{q=0.5,w=0,e=0,r=0})then jb(HK_Q)end end end end end if h==nil and V.charName=='KogMaw'then local pb=0 local qb=GGPrediction:SpellPrediction({Delay=0.25,Radius=70,Range=1200,Speed=1650,Collision=true,Type=GGPrediction.SPELLTYPE_LINE})local rb=GGPrediction:SpellPrediction({Delay=0.25,Radius=120,Range=1360,Speed=1350,Collision=false,Type=GGPrediction.SPELLTYPE_LINE})local sb=GGPrediction:SpellPrediction({Delay=0.25+0.6,Radius=240/2,Range=0,Speed=X.huge,Collision=false,Type=GGPrediction.SPELLTYPE_CIRCLE})h={CanAttackCb=function()if Y.CanUseSpell(_W)==0 and Y.Timer()<m.WTimer+0.33 then return end return m:CanTakeAction({q=0.33,w=0,e=0.33,r=0.33})end,CanMoveCb=function()return m:CanTakeAction({q=0.23,w=0,e=0.23,r=0.23})end,OnPreAttack=function(tb)h:PreTick()if Y.CanUseSpell(_W)~=0 then return end if not((h.IsCombo and g.wcombo)or(h.IsHarass and g.wharass))then return end local ub=n:GetEnemyHeroes(610+(20*V:GetSpellData(_W).level)+V.boundingRadius-35,true,true,true)if#ub>0 then jb(HK_W)pb=eb()end end,OnPostAttackTick=function(tb)h:PreTick()h:QLogic()h:ELogic()h:RLogic()end,}function h:Menu()f.Combo:Menu('Q','Q')f.Combo.Q:OnOff('qcombo','Enabled',true)f.Combo.Q:List('qhitchance','Hitchance',2,{"normal","high","immobile"})f.Combo.Q:OnOff('wstopq','Stop if W is Active',false)f.Combo:Menu('W','W')f.Combo.W:OnOff('wcombo','Enabled',true)f.Combo:Menu('E','E')f.Combo.E:OnOff('ecombo','Enabled',true)f.Combo.E:List('ehitchance','Hitchance',2,{"normal","high","immobile"})f.Combo.E:Slider('emana','Use if Mana Percent > x% (20)',20,1,100,1)f.Combo.E:OnOff('wstope','Stop if W is Active',false)f.Combo:Menu('R','R')f.Combo.R:OnOff('rcombo','Enabled',true)f.Combo.R:List('rhitchance','Hitchance',2,{"normal","high","immobile"})f.Combo.R:Slider('rmana','Use if Mana Percent > x% (20)',20,1,100,1)f.Combo.R:OnOff('ronlylow','Only 0-40 % HP enemies',true)f.Combo.R:Slider('rxstacks','Stop at x stacks (3)',3,1,9,1)f.Combo.R:OnOff('wstopr','Stop if W is Active',false)f.Combo.R.rcombo:PermaShow('R Combo ')f.Harass:Menu('Q','Q')f.Harass.Q:OnOff('qharass','Enabled',true)f.Harass:Menu('W','W')f.Harass.W:OnOff('wharass','Enabled',false)f.Harass:Menu('E','E')f.Harass.E:OnOff('eharass','Enabled',false)f.Harass:Menu('R','R')f.Harass.R:OnOff('rharass','Enabled',false)f:Menu('KillSteal','KillSteal')f.KillSteal:Menu('R','R')f.KillSteal.R:OnOff('rksenabled','Enabled',true)f.KillSteal.R:OnOff('rksstack','Check Stacks',false)f.KillSteal.R:List('rkshitchance','Hitchance',2,{"normal","high","immobile"})f:Menu('SemiManual','SemiManual')f.SemiManual:Menu('R','R')f.SemiManual.R:KeyDown('rsemikey','Semi-Manual Key',"T")f.SemiManual.R:OnOff('rsemistack','Check R stacks',false)f.SemiManual.R:OnOff('rsemionlylow','Only 0-40 % HP enemies',false)f.SemiManual.R:List('rsemihitchance','Hitchance',2,{"normal","high","immobile"})f.SemiManual.R:Menu('useon','Use on')end function h:OnLoad()n:OnEnemyHeroLoad(function(tb)f.SemiManual.R.useon:OnOff('rsemiuseon'..tb.charName,tb.charName,true)end)end function h:OnTick()self.WMana=V.mana-40-(V:GetSpellData(_W).currentCd*V.mpRegen)if not self.IsAttacking then self:RKS()end self:WLogic()if self.IsAttacking or self.CanAttackTarget or self.AttackTarget then return end self.HasWBuff=k:HasBuff(V,"KogMawBioArcaneBarrage")if eb()<pb+300 or self.Timer<m.WkTimer+0.3 then return end self:QLogic()self:ELogic()self:RLogic()end function h:QLogic()if not m:IsReady(_Q,{q=0.33,w=0,e=0.33,r=0.33})then return end if self.WMana<V:GetSpellData(_Q).mana then return end self:QCombo()end function h:WLogic()if Y.CanUseSpell(_W)~=0 then return end self:WCombo()end function h:ELogic()if not m:IsReady(_E,{q=0.33,w=0,e=0.33,r=0.33})then return end if self.WMana<V:GetSpellData(_E).mana then return end self:ECombo()end function h:RLogic()if not m:IsReady(_R,{q=0.33,w=0,e=0.33,r=1})then return end if self.WMana<V:GetSpellData(_R).mana then return end sb.Range=900+300*V:GetSpellData(_R).level self.RTargets=mb(sb.Range)self.RStacks=k:GetBuffCount(V,"kogmawlivingartillerycost")self:RSemiManual()self:RCombo()end function h:QCombo()if not((self.IsCombo and g.qcombo)or(self.IsHarass and g.qharass))then return end if g.wstopq and self.HasWBuff then return end local tb=self.AttackTarget~=nil and self.AttackTarget or i:GetTarget(mb(1175),v)jb(HK_Q,tb,qb,g.qhitchance+1)end function h:WCombo()if not((self.IsCombo and g.wcombo)or(self.IsHarass and g.wharass))then return end local tb=n:GetEnemyHeroes(610+(20*V:GetSpellData(_W).level)+V.boundingRadius-35,true,true,true)if#tb>0 then jb(HK_W)pb=eb()end end function h:ECombo()if not((self.IsCombo and g.ecombo)or(self.IsHarass and g.eharass))then return end if g.wstope and self.HasWBuff then return end if self.ManaPercent<g.emana then return end local tb=self.AttackTarget~=nil and self.AttackTarget or i:GetTarget(mb(1280),v)jb(HK_E,tb,rb,g.ehitchance+1)end function h:RCombo()if not((self.IsCombo and g.rcombo)or(self.IsHarass and g.rharass))then return end if g.wstopr and self.HasWBuff then return end if self.ManaPercent<g.rmana then return end if self.RStacks>=g.rxstacks then return end local tb={}local ub=self.AttackTarget if g.ronlylow then if ub and ub.health*100/ub.maxHealth>=40 then ub=nil end if ub==nil then for vb,wb in ipairs(self.RTargets)do if((wb.health+(wb.hpRegen*3))*100)/wb.maxHealth<40 then U(tb,wb)end end end elseif ub==nil then tb=self.RTargets end jb(HK_R,ub~=nil and ub or i:GetTarget(tb,v),sb,g.rhitchance+1)end function h:RKS()if not m:IsReady(_R,{q=0.33,w=0,e=0.33,r=1})then return end if self.WMana<V:GetSpellData(_R).mana then return end sb.Range=900+300*V:GetSpellData(_R).level self.RTargets=mb(sb.Range)self.RStacks=k:GetBuffCount(V,"kogmawlivingartillerycost")if not g.rksenabled then return end if g.rksstack and self.RStacks>=g.rxstacks then return end local tb=60+(40*V:GetSpellData(_R).level)+(V.bonusDamage*0.65)+(V.ap*0.25)for ub,vb in ipairs(self.RTargets)do local wb=vb.health local xb=vb.hpRegen local yb=X.floor(100-(((wb+(xb*3))*100)/vb.maxHealth))local zb=yb>60 and tb*2 or tb*(1+(yb*0.00833))if l:CalculateDamage(V,vb,v,zb)>wb+(xb*2)then if jb(HK_R,i:GetTarget(enemies,v),sb,g.rkshitchance+1)then break end end end end function h:RSemiManual()if not g.rsemikey then return end if g.rsemistack and self.RStacks>=g.rxstacks then return end local tb={}if g.rsemionlylow then for vb,wb in ipairs(self.RTargets)do if((wb.health+(wb.hpRegen*3))*100)/wb.maxHealth<40 then U(tb,wb)end end else tb=self.RTargets end local ub={}for vb,wb in ipairs(tb)do if g['rsemiuseon'..wb.charName]then U(ub,wb)end end jb(HK_R,i:GetTarget(ub,v),sb,g.rsemihitchance+1)end end if h==nil and V.charName=='MissFortune'then f:Info('infoAram','Aram - WQE Spam')h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if self.AttackTarget then if j.Modes[y]and m:IsReady(_W,{q=0,w=0.33,e=0,r=0})then jb(HK_W)end if j:CanMove()then if m:IsReady(_Q,{q=0.33,w=0,e=0,r=0})then jb(HK_Q,self.AttackTarget)return end if m:IsReady(_E,{q=0,w=0,e=0.5,r=0})then jb(HK_E,self.AttackTarget)return end end end end end if h==nil and V.charName=='Morgana'then f.q_combo=f.q:MenuElement({id='combo',name='Combo',value=true})f.q_harass=f.q:MenuElement({id='harass',name='Harass',value=true})f.q_hitchance=f.q:MenuElement({id="hitchance",name="Hitchance",value=2,drop={"Normal","High","Immobile"}})f.q_useon=f.q:MenuElement({id="useon",name="Use on",type=_G.MENU})f.q:MenuElement({id="auto",name="Auto",type=_G.MENU})f.q_auto_enabled=f.q.auto:MenuElement({id="enabled",name="Enabled",value=true})f.q_auto_hitchance=f.q.auto:MenuElement({id="hitchance",name="Hitchance",value=2,drop={"Normal","High","Immobile"}})f.q_auto_useon=f.q.auto:MenuElement({id="useon",name="Use on",type=_G.MENU})f.q:MenuElement({id="ks",name="Killsteal",type=_G.MENU})f.q_ks_enabled=f.q.ks:MenuElement({id="enabled",name="Enabled",value=false})f.q_ks_hitchance=f.q.ks:MenuElement({id="hitchance",name="Hitchance",value=2,drop={"Normal","High","Immobile"}})f.q:MenuElement({id="interrupter",name="Interrupter",type=_G.MENU})f.q_interrupter_enabled=f.q.interrupter:MenuElement({id="enabled",name="Enabled",value=true})f.q:MenuElement({id="attack",name="DisableAttack",type=_G.MENU})f.q_attack_disable=f.q.attack:MenuElement({id="disable",name="Disable attack if ready or almostReady",value=false})f.w_combo=f.w:MenuElement({id='combo',name='Combo',value=false})f.w_harass=f.w:MenuElement({id='harass',name='Harass',value=false})f.w_hitchance=f.w:MenuElement({id="hitchance",name="Hitchance",value=3,drop={"Normal","High","Immobile"}})f.w:MenuElement({id="auto",name="Auto",type=_G.MENU})f.w_auto_enabled=f.w.auto:MenuElement({id="enabled",name="Enabled",value=true})f.w_auto_hitchance=f.w.auto:MenuElement({id="hitchance",name="Hitchance",value=3,drop={"Normal","High","Immobile"}})f.w:MenuElement({id="lane",name="LaneClear",type=_G.MENU})f.w_lane_enabled=f.w.lane:MenuElement({id="enabled",name="Enabled",value=false})f.w_lane_count=f.w.lane:MenuElement({id="count",name="LaneClear Minions",value=3,min=1,max=5,step=1})f.w:MenuElement({id="ks",name="Killsteal",type=_G.MENU})f.w_ks_enabled=f.w.ks:MenuElement({id="enabled",name="Enabled",value=true})f.w_ks_hitchance=f.w.ks:MenuElement({id="hitchance",name="Hitchance",value=1,drop={"Normal","High","Immobile"}})f.e_enabled=f.e:MenuElement({id="enabled",name="Enabled",value=true})f.e_ally=f.e:MenuElement({id="ally",name="Use on ally",value=true})f.e_selfish=f.e:MenuElement({id="selfish",name="Use on yourself",value=true})f.r_combo=f.r:MenuElement({id='combo',name='Combo',value=true})f.r_harass=f.r:MenuElement({id='harass',name='Harass',value=false})f.r_xenemies=f.r:MenuElement({id="xenemies",name="X Enemies",value=2,min=1,max=5,step=1})f.r_xrange=f.r:MenuElement({id="xrange",name="X Distance",value=550,min=300,max=600,step=50})f.r:MenuElement({id="auto",name="Auto",type=_G.MENU})f.r_auto_enabled=f.r.auto:MenuElement({id="enabled",name="Enabled",value=true})f.r_auto_xenemies=f.r.auto:MenuElement({id="xenemies",name="X Enemies",value=3,min=1,max=5,step=1})f.r_auto_xrange=f.r.auto:MenuElement({id="xrange",name="X Distance",value=550,min=300,max=600,step=50})f.r:MenuElement({id="ks",name="Killsteal",type=_G.MENU})f.r_ks_enabled=f.r.ks:MenuElement({id="enabled",name="Enabled",value=true})local pb=GGPrediction:SpellPrediction({Type=GGPrediction.SPELLTYPE_LINE,Delay=0.25,Radius=140/2,Range=1250,Speed=1200,Collision=true,MaxCollision=0,CollisionTypes={GGPrediction.COLLISION_MINION}})local qb=GGPrediction:SpellPrediction({Type=GGPrediction.SPELLTYPE_CIRCLE,Delay=0.25,Radius=100,Range=900,Speed=X.huge})local rb={Range=800}local sb={Range=625}h={CanAttackCb=function()if not m:CanTakeAction({q=0.33,w=0.33,e=0.33,r=0.33})then return false end if not j.Modes[y]and not j.Modes[z]then return true end local tb=V:GetSpellData(_Q)if f.q_attack_disable:Value()and tb.level>0 and V.mana>tb.mana and(Y.CanUseSpell(_Q)==0 or tb.currentCd<1)then return false end return true end,CanMoveCb=function()return m:CanTakeAction({q=0.25,w=0.25,e=0.25,r=0.25})end,}function h:OnLoad()n:OnEnemyHeroLoad(function(tb)f.q_auto_useon:MenuElement({id=tb.charName,name=tb.charName,value=true})f.q_useon:MenuElement({id=tb.charName,name=tb.charName,value=true})end)end function h:OnTick()self:QLogic()self:WLogic()self:ELogic()self:RLogic()end function h:QLogic()if not m:IsReady(_Q,{q=1,w=0.3,e=0.3,r=0.3})then return end self.QTargets=mb(pb.Range)self:QKS()self:QInterrupter()self:QAuto()self:QCombo()end function h:WLogic()if not m:IsReady(_W,{q=0.3,w=1,e=0.3,r=0.3})then return end self.WTargets=mb(qb.Range)self:WKS()self:WAuto()self:WCombo()self:WLaneClear()end function h:ELogic()if not m:IsReady(_E,{q=0.3,w=0.3,e=1,r=0.3})then return end if not f.e_enabled:Value()then return end if not f.e_ally:Value()and not f.e_selfish:Value()then return end self.ETargets=mb(2500)self.EAllies=n:GetAllyHeroes(rb.Range)self:EAuto()end function h:RLogic()if not m:IsReady(_R,{q=0.33,w=0.33,e=0.33,r=1})then return end self.RTargets=mb(sb.Range)self:RKS()self:RAuto()self:RCombo()end function h:QKS()if not f.q_ks_enabled:Value()then return end local tb=25 local ub=55*V:GetSpellData(_Q).level local vb=V.ap*0.9 local wb=tb+ub+vb if wb<100 then return end for xb,yb in ipairs(self.QTargets)do local zb=yb.health if zb>100 and zb<l:CalculateDamage(V,yb,v,wb)then jb(HK_Q,yb,pb,f.q_ks_hitchance:Value()+1)end end end function h:QInterrupter()if not f.q_interrupter_enabled:Value()then return end for tb,ub in ipairs(self.QTargets)do local vb=ub.activeSpell if vb and vb.valid and gb[vb.name]and vb.castEndTime-self.Timer>0.33 then jb(HK_Q,ub,pb,r)end end end function h:QAuto()if not f.q_auto_enabled:Value()then return end local tb={}for ub,vb in ipairs(self.QTargets)do local wb=f.q_auto_useon[vb.charName]if wb and wb:Value()then U(tb,vb)end end jb(HK_Q,i:GetTarget(tb,v),pb,f.q_auto_hitchance:Value()+1)end function h:QCombo()if not((self.IsCombo and f.q_combo:Value())or(self.IsHarass and f.q_harass:Value()))then return end local tb={}for ub,vb in ipairs(self.QTargets)do local wb=f.q_useon[vb.charName]if wb and wb:Value()then U(tb,vb)end end jb(HK_Q,i:GetTarget(tb,v),pb,f.q_hitchance:Value()+1)end function h:WKS()if not f.w_ks_enabled:Value()then return end local tb=10 local ub=14*V:GetSpellData(_W).level local vb=V.ap*0.22 local wb=tb+ub+vb if wb<100 then return end for xb,yb in ipairs(self.WTargets)do local zb=yb.health if zb>100 and zb<l:CalculateDamage(V,yb,v,wb)then jb(HK_W,yb,qb,f.w_ks_hitchance:Value()+1)end end end function h:WAuto()if not f.w_auto_enabled:Value()then return end for tb,ub in ipairs(self.WTargets)do jb(HK_W,ub,qb,f.w_auto_hitchance:Value()+1)end end function h:WCombo()if not((self.IsCombo and f.w_combo:Value())or(self.IsHarass and f.w_harass:Value()))then return end for tb,ub in ipairs(self.WTargets)do jb(HK_W,ub,qb,f.w_hitchance:Value()+1)end end function h:WLaneClear()if not(self.IsLaneClear and f.w_lane_enabled:Value())then return end local tb=nil local ub=0 local vb=0 self.WEnemyMinions=n:GetEnemyMinions(qb.Range+250)for wb,xb in ipairs(self.WEnemyMinions)do if xb.distance<qb.Range then vb=0 local yb=xb.pos for zb,Ab in ipairs(self.WEnemyMinions)do if yb:DistanceTo(Ab.pos)<250 then vb=vb+1 end end if vb>ub then ub=vb tb=xb end end end if tb and ub>=f.w_lane_count:Value()then jb(HK_W,tb)end end function h:EAuto()for tb,ub in ipairs(self.ETargets)do local vb=ub.pos local wb=ub.activeSpell if wb and wb.valid and ub.isChanneling then for xb,yb in ipairs(self.EAllies)do if(f.e_selfish:Value()and yb.isMe)or(f.e_ally:Value()and not yb.isMe)then local zb=false if wb.target==yb.handle then zb=true else local Ab=yb.pos local Bb=wb.placementPos local Cb=yb.boundingRadius+100 if wb.width>0 then Cb=Cb+wb.width end local Db,Eb=GGPrediction:ClosestPointOnLineSegment(Ab,Bb,vb)if Eb and hb(Db,Ab,Cb)then zb=true end end if zb then jb(HK_E,yb)end end end end end end function h:RKS()if not f.r_ks_enabled:Value()then return end local tb=75 local ub=75*V:GetSpellData(_R).level local vb=V.ap*0.7 local wb=tb+ub+vb if wb<100 then return end for xb,yb in ipairs(self.RTargets)do local zb=yb.health if zb>100 and zb<l:CalculateDamage(V,yb,v,wb)then jb(HK_R)end end end function h:RAuto()if not f.r_auto_enabled:Value()then return end local tb=0 for ub,vb in ipairs(self.RTargets)do if vb.distance<f.r_auto_xrange:Value()then tb=tb+1 end end if tb>=f.r_auto_xenemies:Value()then jb(HK_R)end end function h:RCombo()if not((self.IsCombo and f.r_combo:Value())or(self.IsHarass and f.r_harass:Value()))then return end local tb=0 for ub,vb in ipairs(self.RTargets)do if vb.distance<f.r_xrange:Value()then tb=tb+1 end end if tb>=f.r_xenemies:Value()then jb(HK_R)end end end if h==nil and V.charName=='Nasus'then f:Info('infoAram','Aram - E Spam')h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if m:IsReady(_E,{q=0,w=0,e=0.5,r=0})then local pb=i:GetTarget(650,v)if pb~=nil then jb(HK_E,pb)return end end end end if h==nil and V.charName=='Nidalee'then f:Info('infoAram','Aram - Q Spam')local pb=GGPrediction:SpellPrediction({Delay=0.25,Radius=40,Range=1500,Speed=1300,Collision=true,Type=GGPrediction.SPELLTYPE_LINE})h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if j.Modes[y]and j:CanMove()then if m:IsReady(_Q,{q=0.2,w=0,e=0,r=0})then local qb=i:GetTarget(pb.Range,v)if qb~=nil then jb(HK_Q,qb,pb,2+1)return end end end end end if h==nil and V.charName=='Quinn'then f:Info('infoAram','Aram - EQ Spam')local pb=GGPrediction:SpellPrediction({Type=GGPrediction.SPELLTYPE_LINE,Delay=0.25,Radius=60,Range=1000,Speed=1550,Collision=false,MaxCollision=0,CollisionTypes={GGPrediction.COLLISION_MINION,GGPrediction.COLLISION_YASUOWALL}})h={CanAttackCb=function()return not V.pathing.isDashing and m:CanTakeAction({q=0.33,w=0,e=0.53,r=0})end,CanMoveCb=function()return not V.pathing.isDashing and m:CanTakeAction({q=0.23,w=0,e=0.43,r=0})end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if j.Modes[y]and self.AttackTarget and j:CanMove()then if m:IsReady(_E,{q=0.5,w=0,e=0.5,r=0})then local qb=i:GetTarget(650,u)if qb~=nil then if jb(HK_E,qb)then return end end end if m:IsReady(_Q,{q=0.5,w=0,e=0.5,r=0})then local qb=i:GetTarget(1000,u)if qb~=nil then if jb(HK_Q,qb,pb,2)then return end end end end end end if h==nil and V.charName=='Ryze'then f:Info('infoAram','Aram - QEQW Spam')local pb=GGPrediction:SpellPrediction({Delay=0.25,Radius=55,Range=1000,Speed=1700,Collision=false,Type=GGPrediction.SPELLTYPE_LINE})local qb=GGPrediction:SpellPrediction({Delay=0.25,Radius=55,Range=1000,Speed=1700,Collision=true,Type=GGPrediction.SPELLTYPE_LINE})h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if m:IsReady(_Q,{q=0.5,w=0,e=0,r=0})then local rb=i:GetTarget(qb.Range,v)if rb~=nil then jb(HK_Q,rb,qb,2+1)return end end if m:IsReady(_E,{q=0,w=0,e=0.5,r=0})then local rb=i:GetTarget(550+80,v)if rb~=nil then jb(HK_E,rb)return end end if m:IsReady(_Q,{q=0.2,w=0,e=0,r=0})then local rb=i:GetTarget(pb.Range,v)if rb~=nil then jb(HK_Q,rb,pb,2+1)return end end if m:IsReady(_W,{q=0,w=0.5,e=0,r=0})then local rb=i:GetTarget(550+80,v)if rb~=nil then jb(HK_W,rb)return end end end end if h==nil and V.charName=='Sivir'then f:Info('infoAram','Aram - WQ Spam')local pb=GGPrediction:SpellPrediction({Type=GGPrediction.SPELLTYPE_LINE,Delay=0.25,Radius=90,Range=1100,Speed=1350,Collision=false,MaxCollision=0,CollisionTypes={GGPrediction.COLLISION_MINION,GGPrediction.COLLISION_YASUOWALL}})h={CanAttackCb=function()return m:CanTakeAction({q=0.33,w=0,e=0,r=0})end,CanMoveCb=function()return m:CanTakeAction({q=0.23,w=0,e=0,r=0})end,OnPostAttack=function()jb(HK_W)end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if j:CanMove()then if self.AttackTarget then if m:IsReady(_W,{q=0,w=0.5,e=0,r=0})then jb(HK_W)end end if m:IsReady(_Q,{q=0.5,w=0.15,e=0,r=0})then local qb=i:GetTarget(1100,u)if qb~=nil then jb(HK_Q,qb,pb,2+1)end end end end end if h==nil and V.charName=='Sona'then f:Info('infoAram','Aram - Q Spam')h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if m:IsReady(_Q,{q=0.2,w=0,e=0,r=0})then local pb=i:GetTarget(800,v)if pb~=nil then jb(HK_Q)return end end end end if h==nil and V.charName=='Taric'then local pb,qb,rb,sb=0,false,nil,{unit=nil,dir=nil,timer=0}f.q_mana=f.q:MenuElement({id="mana",name="Min. Mana %",value=50,min=0,max=100,step=5})f.e_follow=f.e:MenuElement({id="Follow",name="Auto-Follow",value=true})h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,}local function tb(Ib,Jb)local Kb,Lb=Jb.x-Ib.x,Jb.z-Ib.z return X.sqrt(Kb*Kb+Lb*Lb)end local function ub(Ib)local Jb=Ib.pathing.pathCount return(not Jb or Jb<0 or Jb>20)and-1 or Jb end local function vb(Ib)local Jb=Ib.pathing.pathIndex return(not Jb or Jb<0 or Jb>20)and-1 or Jb end local function wb(Ib)local Jb={}cb.insert(Jb,Ib.pos)if Ib.pathing.hasMovePath then local Kb,Lb=vb(Ib),ub(Ib)if Kb==-1 or Lb==-1 then return Jb end for Mb=Kb,Lb do cb.insert(Jb,Ib:GetPath(Mb))end end return Jb end local function xb(Ib,Jb)if not(Ib and Ib.valid and Ib.visible)then return nil end local Kb=wb(Ib)if#Kb==1 then return Kb[1]end local Lb=Ib.pathing.isDashing and Ib.pathing.dashSpeed or Ib.ms local Mb=Lb*Jb for Nb=1,#Kb-1 do local Ob,Pb=Kb[Nb],Kb[Nb+1]local Qb=tb(Ob,Pb)if Qb>=Mb then return Ob:Extended(Pb,Mb)end Mb=Mb-Qb end return Kb[#Kb]end local function yb()return(SDK and SDK.Orbwalker.Modes[SDK.ORBWALKER_MODE_COMBO])or(PremiumOrbwalker and PremiumOrbwalker:GetMode()=="Combo")end local function zb(Ib,Jb)if Ib and Ib.valid and Ib.visible and Ib.alive and Ib.isTargetable and(Jb==nil or Ib.distance<Jb)then return true end return false end local function Ab()local Ib={}local Jb=0 for Kb=1,Y.HeroCount()do local Lb=Y.Hero(Kb)if zb(Lb,1000)and not Lb.isAlly then Jb=Jb+1 Ib[Jb]={Lb.pos,Lb.boundingRadius+180}end end for Kb=1,Y.MinionCount()do local Lb=Y.Minion(Kb)if zb(Lb,1000)and not Lb.isAlly then Jb=Jb+1 Ib[Jb]={Lb.pos,Lb.boundingRadius+120}end end for Kb=1,Y.TurretCount()do local Lb=Y.Turret(Kb)if zb(Lb,1000)and not Lb.isAlly then Jb=Jb+1 Ib[Jb]={Lb.pos,Lb.boundingRadius+120}end end return Ib end local function Bb(Ib,Jb)for Kb=1,#Ib do local Lb=Ib[Kb]if Jb:DistanceTo(Lb[1])<Lb[2]then return true end end return false end local function Cb(Ib)local Jb=0 local Kb=Ib local Lb=(Ib-V.pos):Normalized()local Mb=Ab()while(Bb(Mb,Kb))do Jb=Jb+50 Kb=Ib+Lb*Jb end return Kb end local function Db(Ib)if not qb then Ib.Process=false end end local function Eb(Ib)if not qb then Ib.Process=false end end local function Fb()if JustEvade and JustEvade:Evading()then return true end if ExtLibEvade and ExtLibEvade.Evading then return true end return false end local function Gb(Ib,Jb)if zb(Ib,600)and Ib.isEnemy then local Kb=xb(Ib,0.25)if Kb and tb(V.pos,Kb)<600 then ab.CastSpell(HK_E,Kb)sb.dir,sb.timer,sb.unit=Z(Kb-V.pos),Y.Timer(),Ib qb=false if SDK then SDK.Orbwalker:ResetMovement()end return true end end return false end local function Hb()local Ib=Y.Timer()if f.e_follow:Value()and Ib-sb.timer<=1 then if Ib-pb>0.1 then pb=Ib local Jb=xb(sb.unit,0.25)if Jb then local Kb=Z(Jb-sb.dir)local Lb=V.pos:Extended(Kb,100)if tb(Lb,Jb)>600 then Lb=V.pos:Extended(Kb,-100)end qb=false _G.Control.Move(Cb(Lb))end end return end if not qb then qb=true end end function h:OnLoad()if _G.SDK then _G.SDK.Orbwalker:OnPreAttack(function(...)Db(...)end)_G.SDK.Orbwalker:OnPreMovement(function(...)Eb(...)end)elseif _G.PremiumOrbwalker then _G.PremiumOrbwalker:OnPreAttack(function(...)Db(...)end)_G.PremiumOrbwalker:OnPreMovement(function(...)Eb(...)end)end end function h:OnWndMsg(Ib,Jb)if not(Ib==513 and Jb==0)then return end for Kb=1,Y.HeroCount()do local Lb=Y.Hero(Kb)if zb(Lb)and Lb.isEnemy and tb(Lb.pos,mousePos)<=150 then rb=Lb return end end rb=nil end function h:OnDraw()if not Fb()then Hb()end if zb(rb)then bb.Circle(rb.pos,115,5,bb.Color(192,148,0,211))end end function h:OnTick()if Fb()or Y.IsChatOpen()or V.dead then return end Hb()if not yb()or self.IsAttacking then return end local Ib=Y.Timer()if Y.CanUseSpell(_Q)==0 and self.AttackTarget and Ib-sb.timer>1 and self.ManaPercent>=f.q_mana:Value()then jb(HK_Q)return end if Y.CanUseSpell(_E)==0 and m:CanTakeAction({q=0.33,w=0,e=0,r=0.33})then if SDK and SDK.Cursor.Step>0 then return end if Gb(rb)then return end for Jb=0,Y.HeroCount()do local Kb=Y.Hero(Jb)if Gb(Kb)then break end end end end end if h==nil and V.charName=='Tristana'then f:Info('infoAram','Aram - QE Spam')h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,OnAttack=function()if j.Modes[y]and Y.CanUseSpell(_Q)==0 then jb(HK_Q)end end,OnPostAttack=function()if j.Modes[y]and Y.CanUseSpell(_Q)==0 then jb(HK_Q)end end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if self.AttackTarget and j:CanMove()then if j.Modes[y]and Y.CanUseSpell(_Q)==0 then jb(HK_Q)end if m:IsReady(_E,{q=0,w=0.75,e=0.33,r=0.5})then jb(HK_E,self.AttackTarget)end end end end if h==nil and V.charName=='Twitch'then local pb=bb.Color(200,65,255,100)local qb=bb.Color(200,255,0,0)local rb=bb.Color(200,188,77,26)f.q_combo=f.q:MenuElement({id='combo',name='Combo',value=false})f.q_harass=f.q:MenuElement({id='harass',name='Harass',value=false})f.q:MenuElement({id="recall",name="Recall",type=_G.MENU})f.q_recall_key=f.q.recall:MenuElement({id='key',name='Invisible Recall Key',key=string.byte('P'),value=false,toggle=true})f.q_recall_note=f.q.recall:MenuElement({id='note',name='Note: Key should be diffrent than recall key',type=_G.SPACE})f.q_recall_key:Value(false)f.w_combo=f.w:MenuElement({id='combo',name='Combo',value=true})f.w_harass=f.w:MenuElement({id='harass',name='Harass',value=false})f.w_stopq=f.w:MenuElement({id='stopq',name='Stop using W when has Q',value=true})f.w_stopr=f.w:MenuElement({id='stopr',name='Stop using W when has R',value=false})f.w_hitchance=f.w:MenuElement({id='hitchance',name='Hitchance',value=2,drop={'normal','high','immobile'}})f.e_combo=f.e:MenuElement({id='combo',name='Combo',value=true})f.e_harass=f.e:MenuElement({id='harass',name='Harass',value=true})f.e_xstacks=f.e:MenuElement({id='xstacks',name='X Stacks',value=6,min=1,max=6,step=1})f.e_xenemies=f.e:MenuElement({id='xenemies',name='X Enemies',value=1,min=1,max=5,step=1})f.e:MenuElement({id="ks",name="Killsteal",type=_G.MENU})f.e_ks_enabled=f.e.ks:MenuElement({id='enabled',name='Enabled',value=true})f.r_combo=f.r:MenuElement({id='combo',name='Combo',value=true})f.r_harass=f.r:MenuElement({id='harass',name='Harass',value=false})f.r_xrange=f.r:MenuElement({id='xrange',name='X Distance',value=750,min=300,max=1500,step=50})f.r_xenemies=f.r:MenuElement({id='xenemies',name='X Enemies',value=3,min=1,max=5,step=1})f.d_qtimer=f.d:MenuElement({id='qtimer',name='Q Timer',value=true})f.d_qinvisible=f.d:MenuElement({id='qinvisible',name='Q Invisible Range',value=true})f.d_qnotification=f.d:MenuElement({id='qnotification',name='Q Notification Range',value=true})local sb={}local tb=true local ub=0 local vb=GGPrediction:SpellPrediction({Delay=0.25,Radius=50,Range=950,Speed=1400,Type=GGPrediction.SPELLTYPE_CIRCLE})h={CanAttackCb=function()return m:CanTakeAction({q=0,w=0.33,e=0.33,r=0})end,CanMoveCb=function()return m:CanTakeAction({q=0,w=0.23,e=0.23,r=0})end,OnPostAttackTick=function(wb)h:PreTick()h:ELogic()h:WLogic()end,}function h:OnTick()self:EBuffManager()if not self.IsAttacking then self:ELogic()end self:RLogic()self:QLogic()if self.IsAttacking or self.CanAttackTarget or self.AttackTarget then return end self:WLogic()end function h:OnDraw()self:DrawTimer()self:DrawInvisibleCircles()end function h:QLogic()if not m:IsReady(_Q,{q=1,w=0,e=0,r=0})then return end self:QRecall()self:QCombo()end function h:WLogic()if not m:IsReady(_W,{q=0,w=1,e=0.33,r=0})then return end self:WCombo()end function h:ELogic()if not m:IsReady(_E,{q=0,w=0.33,e=1,r=0})then return end self.ETargets=mb(1200-35)self:EKS()self:ECombo()end function h:RLogic()if not m:IsReady(_R,{q=0,w=0,e=0,r=1})then return end self:RCombo()end function h:QRecall()if f.q_recall_key:Value()==tb then ab.KeyDown(HK_Q)ab.KeyUp(HK_Q)ab.KeyDown(string.byte("B"))ab.KeyUp(string.byte("B"))tb=not tb end end function h:QCombo()if not((self.IsCombo and f.q_combo:Value())or(self.IsHarass and f.q_harass:Value()))then return end if self.AttackTarget then jb(HK_Q)end end function h:WCombo()if not((self.IsCombo and f.w_combo:Value())or(self.IsHarass and f.w_harass:Value()))then return end if f.w_stopq:Value()and k:HasBuff(V,"globalcamouflage")then return end if f.w_stopr:Value()and self.Timer<m.RkTimer+5.45 then return end local wb=self.AttackTarget~=nil and self.AttackTarget or i:GetTarget(mb(950),u)jb(HK_W,wb,vb,f.w_hitchance:Value()+1)end function h:EBuffManager()local wb=mb(2000)for xb,yb in ipairs(wb)do local zb=yb.networkID if sb[zb]==nil then sb[zb]={count=0,duration=0}end local Ab=k:GetBuff(yb,'twitchdeadlyvenom')if Ab and Ab.count>0 and Ab.duration>0 then if sb[zb].count<6 and Ab.duration>sb[zb].duration then sb[zb].count=sb[zb].count+1 end sb[zb].duration=Ab.duration else sb[zb].count=0 sb[zb].duration=0 end end end function h:EKS()if not f.e_ks_enabled:Value()then return end for wb,xb in ipairs(self.ETargets)do if sb[xb.networkID]then local yb=sb[xb.networkID].count if yb>0 then local zb=V:GetSpellData(_E).level local Ab=10+(zb*10)local Bb=(10+(5*zb))*yb local Cb=V.bonusDamage*0.35*yb local Db=V.ap*0.333*yb local Eb=Ab+Bb+Cb+Db if l:CalculateDamage(V,xb,u,Eb)>=xb.health+(1.5*xb.hpRegen)then jb(HK_E)break end end end end end function h:ECombo()if not((self.IsCombo and f.e_combo:Value())or(self.IsHarass and f.e_harass:Value()))then return end local wb=0 for xb,yb in ipairs(self.ETargets)do if sb[yb.networkID]then local zb=sb[yb.networkID].count if zb>0 and zb>=f.e_xstacks:Value()then wb=wb+1 end end end if wb>=f.e_xenemies:Value()then jb(HK_E)end end function h:RCombo()if not((self.IsCombo and f.r_combo:Value())or(self.IsHarass and f.r_harass:Value()))then return end local wb=mb(f.r_xrange:Value())if#wb>=f.r_xenemies:Value()then jb(HK_R)end end function h:DrawTimer()if not f.d_qtimer:Value()then return end local wb=1.35-(self.Timer-m.QkTimer)if wb>0 then kb(V,tostring(X.floor(wb*1000)),pb)return end local xb=k:GetBuffDuration(V,"TwitchHideInShadows")if xb>0 then kb(V,tostring(X.floor(xb*1000)),pb)end end function h:DrawInvisibleCircles()if not k:HasBuff(V,"TwitchHideInShadows")then return end if f.d_qinvisible:Value()then bb.Circle(V.pos,500,1,qb)end if f.d_qnotification:Value()then bb.Circle(V.pos,800,1,rb)end end end if h==nil and V.charName=='Varus'then local pb=true local qb=false local rb=true local sb=false local tb=0.5 local ub=300 local vb=2 local wb=true local xb=false local yb=50 local zb=true local Ab=false local Bb=true local Cb=false local Db=2 local Eb=true local Fb=false local Gb=200 local Hb=600 local Ib=500 local Jb=2 f.q:MenuElement({id="combo",name="Combo",value=pb,callback=function(Nb)pb=Nb end})f.q:MenuElement({id="harass",name="Harass",value=qb,callback=function(Nb)qb=Nb end})f.q:MenuElement({id="wstacks",name="when enemy has W buff x3",value=rb,callback=function(Nb)rb=Nb end})f.q:MenuElement({id="wstacksskip",name="skip W buff check if no attack target",value=sb,callback=function(Nb)sb=Nb end})f.q:MenuElement({id="xtime",name="minimum charging time",value=tb,min=0.1,max=1.4,step=0.1,callback=function(Nb)tb=Nb end})f.q:MenuElement({id="xrange",name="charging time only if no enemies in aarange + x",value=ub,min=100,max=600,step=10,callback=function(Nb)ub=Nb end})f.q:MenuElement({id="hitchance",name="Hitchance",value=vb,drop={"normal","high","immobile"},callback=function(Nb)vb=Nb end})f.w:MenuElement({id="combo",name="Combo",value=wb,callback=function(Nb)wb=Nb end})f.w:MenuElement({id="harass",name="Harass",value=xb,callback=function(Nb)xb=Nb end})f.w:MenuElement({id="hp",name="enemy %hp less than",value=yb,min=1,max=100,step=1,callback=function(Nb)yb=Nb end})f.e:MenuElement({id="combo",name="Combo",value=zb,callback=function(Nb)zb=Nb end})f.e:MenuElement({id="harass",name="Harass",value=Ab,callback=function(Nb)Ab=Nb end})f.e:MenuElement({id="wstacks",name="when enemy has W buff x3",value=Bb,callback=function(Nb)Bb=Nb end})f.e:MenuElement({id="wstacksskip",name="skip W buff check if no attack target",value=Cb,callback=function(Nb)Cb=Nb end})f.e:MenuElement({id="hitchance",name="Hitchance",value=Db,drop={"normal","high","immobile"},callback=function(Nb)Db=Nb end})f.r:MenuElement({id="combo",name="Use R Combo",value=Eb,callback=function(Nb)Eb=Nb end})f.r:MenuElement({id="harass",name="Use R Harass",value=Fb,callback=function(Nb)Fb=Nb end})f.r:MenuElement({id="xherohp",name="hero near to death hp",value=Gb,min=100,max=1000,step=50,callback=function(Nb)Gb=Nb end})f.r:MenuElement({id="xenemyhp",name="enemy health above",value=Hb,min=100,max=1000,step=50,callback=function(Nb)Hb=Nb end})f.r:MenuElement({id="xrange",name="enemy in range",value=Ib,min=250,max=1000,step=50,callback=function(Nb)Ib=Nb end})f.r:MenuElement({id="hitchance",name="Hitchance",value=Jb,drop={"normal","high","immobile"},callback=function(Nb)Jb=Nb end})f.r:MenuElement({name="Semi Manual",id="semi",type=_G.MENU})f.r_semi_key=f.r.semi:MenuElement({name="Semi-Manual Key",id="key",key=string.byte("T")})f.r_semi_hitchance=f.r.semi:MenuElement({id="hitchance",name="Hitchance",value=2,drop={"normal","high","immobile"}})local Kb=GGPrediction:SpellPrediction({Delay=0.1,Radius=70,Range=1650,Speed=1900,Collision=false,Type=GGPrediction.SPELLTYPE_LINE})local Lb=GGPrediction:SpellPrediction({Delay=0.5,Radius=235,Range=925,Speed=1500,Collision=false,Type=GGPrediction.SPELLTYPE_CIRCLE})local Mb=GGPrediction:SpellPrediction({Delay=0.25,Radius=120,Range=1075,Speed=1950,Collision=false,Type=GGPrediction.SPELLTYPE_LINE})h={CanAttackCb=function()return not h:HasQBuff()and m:CanTakeAction({q=0.33,w=0,e=0.33,r=0.33})end,CanMoveCb=function()return m:CanTakeAction({q=0.2,w=0,e=0.2,r=0.2})end,}function h:HasQBuff()return k:HasBuff(V,"varusq")or self.Timer<m.QTimer+0.5 end function h:OnTick()if self:HasQBuff()then if not self.IsCombo and not self.IsHarass then return end self:QBuffLogic()return end if ab.IsKeyDown(HK_Q)and(self.IsCombo or self.IsHarass)and not k:HasBuff(V,"varusq")and self.Timer>m.QTimer+0.5 and self.Timer>m.QkTimer+0.5 and Y.CanUseSpell(_Q)==0 then ab.KeyUp(HK_Q)end if self.IsAttacking or self.CanAttackTarget then return end self.WSpellData=V:GetSpellData(_W)self:RLogic()self:ELogic()self:QLogic()end function h:QCanUp(Nb)if Nb==nil then return false end Kb:GetPrediction(Nb,V)if Kb:CanHit(vb+1)then return true end return false end function h:QBuffLogic()if not ab.IsKeyDown(HK_Q)then return end local Nb=self.Timer-m.QTimer if Nb>6 then return end local Ob=mb(V.range+ub)if#Ob==0 and Nb<tb then return end Kb.Range=925+(Nb*0.5*700)local Pb=Y.CanUseSpell(_W)==0 and((self.IsCombo and wb)or(self.IsHarass and xb))if self:QCanUp(self.AttackTarget)and GGPrediction:GetDistance(self.AttackTarget.pos,self.Pos)<Kb.Range-50 then if Pb and 100*self.AttackTarget.health/self.AttackTarget.maxHealth<yb then ab.KeyDown(HK_W)ab.KeyUp(HK_W)end ab.CastSpell(HK_Q,Kb.CastPosition)return end local Qb=i:GetTarget(mb(Kb.Range),u)if self:QCanUp(Qb)and GGPrediction:GetDistance(Qb.pos,self.Pos)<Kb.Range-50 then if Pb and 100*Qb.health/Qb.maxHealth<yb then ab.KeyDown(HK_W)ab.KeyUp(HK_W)end ab.CastSpell(HK_Q,Kb.CastPosition)end end function h:QLogic()if not m:IsReady(_Q,{q=0.33,w=0,e=0.6,r=0.33})then return end self:QCombo()end function h:QCombo()if not((self.IsCombo and pb)or(self.IsHarass and qb))then return end local Nb=mb(1500)for Ob=1,#Nb do local Pb=Nb[Ob]if not rb or self.WSpellData.level==0 or k:GetBuffCount(Pb,"varuswdebuff")==3 or(sb and self.AttackTarget==nil)then ab.KeyDown(HK_Q)break end end end function h:ELogic()if not m:IsReady(_E,{q=0.33,w=0,e=0.63,r=0.33})then return end self:ECombo()end function h:ECombo()if not((self.IsCombo and zb)or(self.IsHarass and Ab))then return end if self.AttackTarget and(not Bb or self.WSpellData.level==0 or k:GetBuffCount(self.AttackTarget,"varuswdebuff")==3)then if jb(HK_E,self.AttackTarget,Lb,Db+1)then return end end local Nb=mb(Lb.Range)for Ob=1,#Nb do local Pb=Nb[Ob]if not Bb or self.WSpellData.level==0 or k:GetBuffCount(Pb,"varuswdebuff")==3 or(Cb and self.AttackTarget==nil)then if jb(HK_E,Pb,Lb,Db+1)then break end end end end function h:RLogic()if not m:IsReady(_R,{q=0.33,w=0,e=0.63,r=0.5})then return end self:RCombo()end function h:RCombo()if not((self.IsCombo and Eb)or(self.IsHarass and Fb))then return end local Nb=V.health<=Gb if self.AttackTarget and GGPrediction:GetDistance(self.AttackTarget.pos,self.Pos)<900 and(Nb or self.AttackTarget.health>=Hb)then if jb(HK_R,self.AttackTarget,Mb,Jb+1)then return end end local Ob=mb(Mb.Range)for Pb=1,#Ob do local Qb=Ob[Pb]if GGPrediction:GetDistance(Qb.pos,self.Pos)<900 then if Nb or Qb.health>=Hb then if jb(HK_R,Qb,Mb,Jb+1)then break end end end end end function h:RSemiManual()if not f.r_semi_key:Value()then return end local Nb=mb(Mb.Range)for Ob=1,#Nb do local Pb=Nb[Ob]if jb(HK_R,Pb,Mb,f.r_semi_hitchance:Value()+1)then break end end end end if h==nil and V.charName=='Vayne'then require"MapPositionGOS"f.q_combo=f.q:MenuElement({id="combo",name="Combo",value=true})f.q_harass=f.q:MenuElement({id="harass",name="Harass",value=false})f.q_mode=f.q:MenuElement({id="mode",name="Q Cast Mode",value=1,drop={"To Side","To Mouse"}})f.q_xdistance=f.q:MenuElement({id="xdistance",name="To Side - hold distance",value=400,min=200,max=700,step=50})f.e_combo=f.e:MenuElement({id="combo",name="Combo (Stun)",value=true})f.e_harass=f.e:MenuElement({id="harass",name="Harass (Stun)",value=false})f.e_hitchance=f.e:MenuElement({id="hitchance",name="Hitchance",value=1,drop={"normal","high","immobile"}})f.e_useon=f.e:MenuElement({name="Use on",id="useon",type=_G.MENU})f.e:MenuElement({name="Anti melee",id="antimelee",type=_G.MENU})f.e_antimelee_enabled=f.e.antimelee:MenuElement({id="enabled",name="Enabled",value=true})f.e_antimelee_xdistance=f.e.antimelee:MenuElement({id="xdistance",name="enemy distance from vayne",value=250,min=200,max=600,step=50})f.e_antimelee_useon=f.e.antimelee:MenuElement({name="Use on",id="useon",type=_G.MENU})f.e:MenuElement({name="Extra Logic",id="extra",type=_G.MENU})f.e_extra_antidash=f.e.extra:MenuElement({id="antidash",name="AntiDash - kha e, rangar r",value=true})f.e_extra_interrupter=f.e.extra:MenuElement({id="interrupter",name="Interrupt dangerous spells",value=true})f.r_combo=f.r:MenuElement({id="combo",name="Combo",value=true})f.r_harass=f.r:MenuElement({id="harass",name="Harass",value=false})f.r_xenemies=f.r:MenuElement({id="xenemies",name="minimum number of enemies near vayne",value=3,min=1,max=5,step=1})f.r_xdistance=f.r:MenuElement({id="xdistance",name="enemy distance from vayne",value=500,min=250,max=750,step=50})local pb=GGPrediction:SpellPrediction({Delay=0.5,Radius=0,Range=550,Speed=2000,Collision=false,UseBoundingRadius=false,Type=GGPrediction.SPELLTYPE_LINE})h={CanAttackCb=function()return m:CanTakeAction({q=0.3,w=0,e=0.5,r=0})end,CanMoveCb=function()return m:CanTakeAction({q=0.2,w=0,e=0.4,r=0})end,OnPostAttackTick=function(qb)h:PreTick()h:RLogic()h:ELogic()if h.Timer<qb+0.3 then h:QLogic()end end,}function h:OnTick()self:RLogic()self:ELogic()if self.IsAttacking or self.CanAttackTarget or self.AttackTarget then return end self:QLogic()end function h:QLogic()if q.Step>0 then return end if not m:IsReady(_Q,{q=1,w=0,e=0.5,r=0})then return end self:QCombo()end function h:QCombo()if q.Step>0 then return end if not((self.IsCombo and f.q_combo:Value())or(self.IsHarass and f.q_harass:Value()))then return end local qb=n:GetEnemyHeroes(false,false,true,true)local rb={}for ub=1,#qb do local vb=qb[ub]if vb.distance<self.Range+vb.boundingRadius-35 then U(rb,vb)end end if#rb==0 then local ub=mb(self.Range+300)local vb=Z(_G.mousePos)if self.Pos:DistanceTo(vb)>=300 then local wb=self.Pos:Extended(vb,300)for xb=1,#ub do local yb=ub[xb]if wb:DistanceTo(yb.pos)<self.Range+yb.boundingRadius-35 then jb(HK_Q)break end end end return end local sb=1000 local tb=nil for ub=1,#rb do local vb=rb[ub]local wb=vb.distance if wb<sb then sb=wb tb=vb end end if f.q_mode:Value()==1 then local ub=f.q_xdistance:Value()local vb=GGPrediction:CircleCircleIntersection(self.Pos,tb.pos,300,ub)if#vb>0 and(n:IsFacing(tb,V,60)or tb.distance<ub)then if GGPrediction:GetDistance(vb[1],_G.mousePos)<GGPrediction:GetDistance(vb[2],_G.mousePos)then jb(HK_Q,{x=vb[1].x,y=0,z=vb[1].z})else jb(HK_Q,{x=vb[2].x,y=0,z=vb[2].z})end else jb(HK_Q)end else jb(HK_Q)end end function h:ELogic()if q.Step>0 then return end if not m:IsReady(_E,{q=0.5,w=0,e=1,r=0})then return end self:EInterrupter()self:ECombo()self:EAntimelee()self:EAntiDash()end function h:ECombo()if q.Step>0 then return end if not((self.IsCombo and f.e_combo:Value())or(self.IsHarass and f.e_harass:Value()))then return end local qb=mb(pb.Range+200)for rb=1,#qb do local sb=qb[rb]if sb.distance<pb.Range+self.BoundingRadius+sb.boundingRadius-35 then local tb=f.e_useon[sb.charName]if tb and tb:Value()then pb:GetPrediction(sb,V)if pb:CanHit(f.e_hitchance:Value()+1)and lb(self.Pos,Z(pb.UnitPosition.x,0,pb.UnitPosition.z),475)and lb(self.Pos,sb.pos,475)then jb(HK_E,sb)break end end end end end function h:EAntimelee()if q.Step>0 then return end if not f.e_antimelee_enabled:Value()then return end local qb={}local rb=mb(f.e_antimelee_xdistance:Value())for sb=1,#rb do local tb=rb[sb]local ub=f.e_antimelee_useon[tb.charName]if tb.range<400 and ub and ub:Value()then U(qb,tb)end end if#qb>0 then cb.sort(qb,function(sb,tb)return sb.health+(sb.totalDamage*2)+(sb.attackSpeed*100)>tb.health+(tb.totalDamage*2)+(tb.attackSpeed*100)end)for sb=1,#qb do local tb=qb[sb]if n:IsFacing(tb,V,75)then jb(HK_E,tb)break end end end end function h:EAntiDash()if q.Step>0 then return end if not f.e_extra_antidash:Value()then return end local qb=mb(pb.Range+self.BoundingRadius+100)for rb=1,#qb do local sb=qb[rb]local tb=sb.pathing if tb and tb.isDashing and sb.posTo then if self.Pos:DistanceTo(sb.posTo)<400 and self.Pos:DistanceTo(sb.pos)<pb.Range+self.BoundingRadius+sb.boundingRadius-35 and n:IsFacing(sb,V,75)then jb(HK_E,sb)break end end end end function h:EInterrupter()if not f.e_extra_interrupter:Value()then return end local qb=mb(pb.Range+self.BoundingRadius+100)for rb=1,#qb do local sb=qb[rb]if sb.distance<pb.Range+self.BoundingRadius+sb.boundingRadius-35 then local tb=sb.activeSpell if tb and tb.valid and gb[tb.name]and tb.castEndTime-self.Timer>0.33 then jb(HK_E,sb)break end end end end function h:RLogic()if not m:IsReady(_R,{q=0.5,w=0,e=0.5,r=1})then return end self:RCombo()end function h:RCombo()if not((self.IsCombo and f.r_combo:Value())or(self.IsHarass and f.r_harass:Value()))then return end local qb=mb(f.r_xdistance:Value())if#qb>=f.r_xenemies:Value()then jb(HK_R)end end function h:OnLoad()n:OnEnemyHeroLoad(function(qb)f.e_useon:MenuElement({id=qb.charName,name=qb.charName,value=true})local rb={["Thresh"]=true,["Azir"]=true,["Velkoz"]=true}local sb=p.HEROES[qb.charName:lower()]if sb and sb[2]and not rb[qb.charName]then f.e_antimelee_useon:MenuElement({id=qb.charName,name=qb.charName,value=true})end end)end end if h==nil and V.charName=='Xayah'then f:Info('infoAram','Aram - WQ Spam')local pb=GGPrediction:SpellPrediction({Type=GGPrediction.SPELLTYPE_LINE,Delay=0.25,Radius=60,Range=1000,Speed=2075,Collision=false,MaxCollision=0,CollisionTypes={GGPrediction.COLLISION_MINION,GGPrediction.COLLISION_YASUOWALL}})h={CanAttackCb=function()return true end,CanMoveCb=function()return true end,}function h:OnTick()if Y.IsChatOpen()or V.dead then return end if j:CanMove()then if self.AttackTarget then if m:IsReady(_W,{q=0,w=0.5,e=0,r=0})then jb(HK_W)return end end if m:IsReady(_Q,{q=0.5,w=0,e=0,r=0})then local qb=i:GetTarget(1100,u)if qb~=nil then jb(HK_Q,qb,pb,2+1)end end end end end if h~=nil then if h.Menu then h:Menu()f:Info()f:Info('Version  '..a)end function h:PreTick()self.IsCombo=j.Modes[y]self.IsHarass=j.Modes[z]self.IsLaneClear=j.Modes[A]self.IsLastHit=j.Modes[C]self.AttackTarget=nil self.CanAttackTarget=false self.IsAttacking=j:IsAutoAttacking()if not self.IsAttacking and(self.IsCombo or self.IsHarass)then self.AttackTarget=i:GetComboTarget()self.CanAttack=j:CanAttack()if self.AttackTarget and self.CanAttack then self.CanAttackTarget=true else self.CanAttackTarget=false end end self.Timer=Y.Timer()self.Pos=V.pos self.BoundingRadius=V.boundingRadius self.Range=V.range+self.BoundingRadius self.ManaPercent=100*V.mana/V.maxMana self.EnemyHeroes=n:GetEnemyHeroes(false,false,true)end Callback.Add('Load',function()i=_G.SDK.TargetSelector j=_G.SDK.Orbwalker k=_G.SDK.BuffManager l=_G.SDK.Damage m=_G.SDK.Spell n=_G.SDK.ObjectManager o=_G.SDK.Attack p=_G.SDK.Data q=_G.SDK.Cursor j:CanAttackEvent(h.CanAttackCb)j:CanMoveEvent(h.CanMoveCb)if h.OnLoad then h:OnLoad()end if h.OnPreAttack then j:OnPreAttack(h.OnPreAttack)end if h.OnAttack then j:OnAttack(h.OnAttack)end if h.OnPostAttack then j:OnPostAttack(h.OnPostAttack)end if h.OnPostAttackTick then j:OnPostAttackTick(h.OnPostAttackTick)end if h.OnTick then cb.insert(_G.SDK.OnTick,function()h:PreTick()h:OnTick()fb=true end)end if h.OnDraw then cb.insert(_G.SDK.OnDraw,function()h:OnDraw()end)end if h.OnWndMsg then cb.insert(_G.SDK.OnWndMsg,function(pb,qb)h:OnWndMsg(pb,qb)end)end end)return end print(V.charName.." not supported !")
